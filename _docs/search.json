[
  {
    "objectID": "cors.html",
    "href": "cors.html",
    "title": "CORS",
    "section": "",
    "text": "CORS_Lib_asof is the date CORS library was compiled.\nIN_COLAB will be True if you are running in Google COlab and set to False otherwise.\n\nCORS_Lib_asof      = 'CORS_Lib_asof: 2023-0614-1908'\n\nThe following module global variables hold the urls to the various parts of the NOAA CORS website.\n\nbase_url           = 'https://geodesy.noaa.gov/'\nrinex_url          = base_url+'corsdata/rinex/'\ncoords_url         = base_url+'corsdata/coord/coord_14/'\nplots_url          = base_url+'corsdata/Plots/'\nstation_log_url    = base_url+'corsdata/station_log/'\ncors_info_url_list = [ base_url+'/corsdata/readme.txt', \n                      base_url+'/corsdata/RINEX211.txt' ]\n\ntest_folder is the default folder where downloaded CORS data will be stored during testing of this package.\n\ntest_folder = '/tmp/test/'\n\nwget_return_codes are the code numbers and decoded descriptions returned by the wget program. wget is used by this package to download the datasets.\n\nwget_return_codes = ('0, No problems occurred.', \n                     '1, Generic error code.',\n                     '2, Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...',\n                     '3, File I/O error.',\n                     '4, Network failure.',\n                     '5, SSL verification failure.',\n                     '6, Username/password authentication failure.',\n                     '7, Protocol errors.',\n                     '8, Server issued an error response.')\n\nTeqc is used to slice RINEX files by time. The url list below are the full list of UNAVCO download sites for teqc. The install_teqc function will download try each one and check that it works.\n\nteqc_list          = [ \n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_CentOSLx86_64s.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_CentOSLx86_64d.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_Lx86_64d.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_Lx86_64s.zip'\n]\n\nIf running on Google Colab, the default path to store binary programs such as teqc is set below. If not running in Colab, binarys will be stored in ~/bin in the users home directory.\n\nprint(f'     IN_COLAB: {IN_COLAB}')\nprint(f'    local_bin: {local_bin}')\nprint(f'CORS_Lib_asof: {CORS_Lib_asof}')\nprint(f'     base_url: {base_url}')\nprint(f'    rinex_url: {rinex_url}')\n\n     IN_COLAB: False\n    local_bin: /home/wright/bin/\nCORS_Lib_asof: CORS_Lib_asof: 2023-0614-1908\n     base_url: https://geodesy.noaa.gov/\n    rinex_url: https://geodesy.noaa.gov/corsdata/rinex/\n\n\n\n\n\n\n\n\n\n install_teqc ()\n\nThis function is used to download and install the teqc software from Unavco. It first checks if the teqc software is already installed in the system. If not, it downloads the teqc_Lx86_64s.zip file from Unavco, unzips it, creates a local bin directory and moves the teqc file to the local bin directory. Finally, it deletes the zip file.\nSee: https://www.unavco.org/software/data-processing/teqc/teqc.html\nParameters: None\nReturns: A string indicating the state of the installation. It can be either: ‘Teqc installed.’, ‘Teqc was already installed.’, or ‘teqc install failed.’\n\ntest_teqc_state = install_teqc()\nprint(test_teqc_state)\n! which teqc\n! teqc -version\n\ninstall_teqc(): \nTeqc was already installed.\n/home/wright/bin/teqc\nexecutable:  teqc\nversion:     teqc  2019Feb25\nbuild:       Linux 2.6.32-573.12.1.x86_64|x86_64|gcc|Linux 64|=+\n\n\n\n\n\n\n\n extract_year (date:str)\n\nExtract the year from a date string in the form: \"2023/1/1\"\nHere is an example.\n\nextract_year( '2023/1/20')\n\n'2023'\n\n\n\n\n\n\n\n isTimeFormat (ts:str)\n\nisTimeFormat(ts) checks the ‘ts’ input string for validity. A valid string is in this format: ‘13:34:56’.\nReturns True for a valid string,a nd False for invalid.\n\n\n\n\nType\nDetails\n\n\n\n\nts\nstr\nTime string as: HH:MM:SS\n\n\nReturns\nbool\nTrue if valid HH:MM:SS time string.\n\n\n\nBelow we test the isTimeFormat() with several input times.\n\nprint('          Returned\\n'\\\n      'Time      Value (rv)\\n'\\\n      '--------------------')\nfor t in ['12:34:56',\n          '12:34',\n          '01:02:03',\n          '23:01:02',\n          '25:34:63']:\n  rv = isTimeFormat(t)\n  print(f'{t:9} rv:{rv}')\n\n          Returned\nTime      Value (rv)\n--------------------\n12:34:56  rv:True\n12:34     rv:False\n01:02:03  rv:True\n23:01:02  rv:True\n25:34:63  rv:False\n\n\n\n\n\n\n\n utctoweekseconds (utc, leapseconds)\n\nThis function takes two parameters, utc and leapseconds, and returns the GPS week, the GPS day, and the seconds and microseconds since the beginning of the GPS week.\nParameters: utc (datetime.datetime): The UTC time to be converted. leapseconds (int): The number of leap seconds to be added to the UTC time. See: GPS Leap Seconds for more information.\nReturns: A tuple containing the GPS week, the GPS day, and the seconds and microseconds since the beginning of the GPS week.\nThe GPS week is an integer representing the number of weeks since the beginning of the GPS epoch (1980-01-06 00:00:00). The GPS day is an integer representing the number of days since the beginning of the GPS week. The seconds and microseconds since the beginning of the GPS week are both integers representing the number of seconds and microseconds since the beginning of the GPS week.\nExample: utc = datetime.datetime(2020, 1, 1, 0, 0, 0) leapseconds = 18\nutctoweekseconds(utc, leapseconds)\nReturns: (2086, 0, 0, 0)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nutc\n\nDate string ‘YYYY/MM/DD’\n\n\nleapseconds\n\nFor 2023, use -18\n\n\nReturns\ntuple\n(GPS_Week, GPS_day, Seconds_since_midnight)\n\n\n\n\n\n\n\n\n compute_day_of_year (date_str:str)\n\nThis function computes the day of the year from a given date string in the format ‘YYYY/MM/DD’.\nParameters: date_str (str): A string representing a date in the format ‘YYYY/MM/DD’.\nReturns: A tuple containing the date in the following formats: ( YYYY/jjj, YYYY-MMDD-Jjjj, YYYY, jjj, DoW)’, where YYYY is the year, jjj: Juliean Day, DoY is the Day of the week.\nEach tuple element has a particular purpose. The first element YYYY/jjj represents the portion of the path used on the CORS web site. The second element, YYYY-MMDD-Jjjj is used to generate the path to store downloaded data. The YYYY is simply the year, and jjj is simple the Julean day of the year, and DoW is the day of the week. Each element is type str.\nExample: compute_day_of_year(‘2020/04/15’)\nReturns: (‘2020/105’, ‘2020-0415-J105’, ‘2020’, ‘105’, ‘04’, ‘15’)\nThe returned tuple contains the day of the year in the format ‘YYYY/DDD’, the year as a string, the day as a string, the month as a string, and the day as a string. The first element of the tuple is the day of the year in the format ‘YYYY/DDD’, which is the year followed by the day of the year. The second element of the tuple is the year as a string. The third element of the tuple is the day as a string. The fourth element of the tuple is the month as a string. The fifth element of the tuple is the day of the week as a string.\nThe CORS path segment refers to the portion of the url that represents the date of the date.\n\n\n\n\nType\nDetails\n\n\n\n\ndate_str\nstr\nDate as ‘YYYY/MM/DD’\n\n\nReturns\ntuple\n\n\n\n\n\ntest_dates = [\n    '2023/1/1',\n    '2023/01/01',\n    '2023/12/31',\n    '2023/05/20'\n]\nprint('All returned data:')\nprint('Input Date     ( YYYY/jjj,   YYYY-MMDD-Jjjj,   YYYY,   jjj,        DoW)')\nprint('-----------------------------------------------------------------------')\nfor d in test_dates:\n  print( f'{d:12} : { compute_day_of_year(d) } ')\n\nprint('\\nDate           CORS path\\n'\\\n       '               segment only:')\nfor d in test_dates:\n  print( f'{d:12} : { compute_day_of_year(d)[0]}')\n\nAll returned data:\nInput Date     ( YYYY/jjj,   YYYY-MMDD-Jjjj,   YYYY,   jjj,        DoW)\n-----------------------------------------------------------------------\n2023/1/1     : ('2023/001', '2023-0101-J001', '2023', '001', '01', '01') \n2023/01/01   : ('2023/001', '2023-0101-J001', '2023', '001', '01', '01') \n2023/12/31   : ('2023/365', '2023-1231-J365', '2023', '365', '12', '31') \n2023/05/20   : ('2023/140', '2023-0520-J140', '2023', '140', '05', '20') \n\nDate           CORS path\n               segment only:\n2023/1/1     : 2023/001\n2023/01/01   : 2023/001\n2023/12/31   : 2023/365\n2023/05/20   : 2023/140\n\n\n\ntest_eq(1,1)\n\n\n\n\n\n\n getHTMLdocument (url)\n\n\n\n\n\nType\nDetails\n\n\n\n\nurl\n\nThe url to get.\n\n\nReturns\nstr\nthe contents of the url as a string.\n\n\n\n\n# Test  getHTMLdocument(rinex_url)\ntest_html = getHTMLdocument(rinex_url)\n\ni = 0\nfor line in test_html.splitlines():\n  print(line); i += 1\n  if i == 10:\n    break\n\n&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Index of /corsdata/rinex&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n&lt;h1&gt;Index of /corsdata/rinex&lt;/h1&gt;\n  &lt;table&gt;\n   &lt;tr&gt;&lt;th valign=\"top\"&gt;&lt;img src=\"/icons/blank.gif\" alt=\"[ICO]\"&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=N;O=D\"&gt;Name&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=M;O=A\"&gt;Last modified&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=S;O=A\"&gt;Size&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=D;O=A\"&gt;Description&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;\n   &lt;tr&gt;&lt;th colspan=\"5\"&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;\n\n\n\n\n\n\n\n CORS_get_Support_url_list (base_url:str, date:str,\n                            file_types:str='sp3.gz|n.gz|g.gz')\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nbase_url\nstr\n\nCOR url.\n\n\ndate\nstr\n\nDate. Format: ‘YYYY:MM:DD’\n\n\nfile_types\nstr\nsp3.gz|n.gz|g.gz\nfile types to get.\n\n\nReturns\nlist\n\nA list of CORS nav and SP3 files.\n\n\n\n\nprint('Testing: CORS_get_Support_url_list()')\nprint('sp3.gz and n.gz and g.gz')\n\nurl = rinex_url\nsp3_and_nav_urls = CORS_get_Support_url_list(url, date='2023/05/23')\nfor fn in sp3_and_nav_urls:\n  print(fn)\n\nprint('\\nsp3 only.')\nfile_types=\"sp3.gz\"\nsp3_urls = CORS_get_Support_url_list(url, date='2023/05/23', file_types=\"sp3.gz\")\nfor fn in sp3_urls:\n  print(fn)\n\nprint('\\nn.gz and g.gz only.')\nfile_types=\"sp3.gz\"\nnav_urls = CORS_get_Support_url_list(url, date='2023/05/23', file_types=\"n.gz|g.gz\")\nfor fn in nav_urls:\n  print(fn)\nprint('Done.')\n\nTesting: CORS_get_Support_url_list()\nsp3.gz and n.gz and g.gz\n\n\n\n\n\n\n\n download_urls (url_list, folder, clobber=False, id='', options='',\n                cut_dirs=4)\n\ndownload_urls() is a function that downloads a list of URLs to a specified root directory.\nParameters: url_list (list): A list of URLs to be downloaded. root_dir (str): The root directory to which the URLs will be downloaded. clobber (bool): A boolean value indicating whether existing files should be overwritten. id (str): An optional identifier for the download. options (str): An optional string of additional wget options.\nThe function uses the wget command to download the URLs. The wget options used are:\n-nv: Not verbose\n-nc: No clobber (use for OSB files to avoid overwriting 1-Sec with 30-Sec)\n-np: No parent. (Important)\n-nH: Do not create a directory named after the url\n--cut-dirs=4: Remove the first four subdirs\n-R \"index.html*\": Do not keep the index.html* files.\n-P xxx: xxx will be the root directory\n\nWget return codes:\n  0   No problems occurred.\n  1   Generic error code.\n  2   Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...\n  3   File I/O error.\n  4   Network failure.\n  5   SSL verification failure.\n  6   Username/password authentication failure.\n  7   Protocol errors.\n  8   Server issued an error response.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl_list\n\n\nList of urls to download.\n\n\nfolder\n\n\nFolder to store the downloads.\n\n\nclobber\nbool\nFalse\nTrue to overwrite, False to not overwrite existing files.\n\n\nid\nstr\n\nOptional id to use in the log file to identify the log.\n\n\noptions\nstr\n\nwget options.\n\n\ncut_dirs\nint\n4\nNumber of url subdirectories to trim.\n\n\nReturns\nlist\n\na list of return status strings for each download.\n\n\n\n\n# Test with some sp3 and nav data.\ntest_url      = rinex_url\nfn = f'{test_folder}/sp3_nav'\ndate = '2023/04/28'\nprint('Testing: CORS_get_Support_url_list()')\nprint(f'Storing in folder: {fn}\\n'\\\n      f'             Date: {date}\\n')\n\ntest_url_list = CORS_get_Support_url_list(test_url, date = date)\nprint('Urls downloaded')\nfor url in test_url_list:\n  print(url)\nrv = download_urls(test_url_list, folder=fn, id='sp3')\nrv_str = wget_return_codes[rv.returncode]\nprint(f'\\nOperation completed. The Wget response was: {rv_str}')\n\n\n\n\n\n\n CORS_trim_to_time (f:str, start:str, stop:str)\n\nTrims a RINEX file (f) to be between the ‘start’ and ‘stop’ times given.\nThis function takes in a file name (f), start time (start) and stop time (stop) as parameters and trims the file to the given time range.\nThe start and stop times are first converted to a format without colons, hyphens and periods. The teqc command is then used to trim the file to the given time range and the output is stored in a temporary file. The temporary file is then moved to the original file name.\nParameters: f (str): The file name to be trimmed. start (str): The start time in the format ‘YYYY-MM-DD HH:MM:SS.SSS’. stop (str): The stop time in the format ‘YYYY-MM-DD HH:MM:SS.SSS’.\nReturns: rv (CompletedProcess): A CompletedProcess object containing information about the run command.\n\n\n\n\nType\nDetails\n\n\n\n\nf\nstr\nRINEX file Name\n\n\nstart\nstr\nStart time str as 'YYYY-MM-DD HH:MM:SS.SSS'\n\n\nstop\nstr\nStop time str as 'YYYY-MM-DD HH:MM:SS.SSS'\n\n\n\n\n\n\n\n\n CORS_get_station_log_url (station_list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the station log files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the station log files.\n\n\n\n\nType\nDetails\n\n\n\n\nstation_list\n\nPython list of CORS Stations.\n\n\nReturns\nlist\nA list of station log file urls\n\n\n\n\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = CORS_get_station_log_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_station_log (dir:str, station_list:list)\n\nThis function downloads the log files of the given CORS stations from the NGS website.\nParameters: dir (str): The directory where the log files should be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (dict): A dictionary containing the station name as the key and the path of the downloaded log file as the value.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\nReturns\nlist\na dict where key is the station ID, and value is path of the downloade file\n\n\n\n\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_station_log( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n CORS_get_station_plots_url (station_list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the corresponding station plot files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the corresponding station plot files.\n\n\n\n\nDetails\n\n\n\n\nstation_list\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: CORS_get_station_plots_url()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nrv = CORS_get_station_plots_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_plots (dir:str, station_list:list)\n\nThis function downloads the plots of the CORS stations from the NGS website.\nParameters: dir (str): The directory where the files will be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: down_load_cors_plots_coords()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_plots( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n CORS_get_station_coords_url (station_list:list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the corresponding station coordinates files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the corresponding station coordinates files.\n\n\n\n\nType\nDetails\n\n\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\nReturns\nlist\nList of coordinates urls\n\n\n\nExample usage:\n\nprint('Testing: CORS_get_station_coords_url()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nrv = CORS_get_station_coords_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_station_coords (dir:str, station_list:list)\n\nThis function downloads the coordinates of the CORS stations from the NGS website.\nParameters: dir (str): The directory where the files will be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: down_load_cors_station_coords()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_station_coords( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n clean_up_CORS (rdir:str, date:str)\n\nclean_up_CORS(rdir, date) Inputs: rdir Directory to start the find command in. date The date of the CORS files to cleanup.\nOutputs: Removes unnecessary files. Returns: None.\nUses the Linux ‘find’ command to locate and remove unnecessary files from within a CORS station directory.\n\n\n\n\nType\nDetails\n\n\n\n\nrdir\nstr\nDirectory start in.\n\n\ndate\nstr\nDate of files to clean up.\n\n\n\n\n\n\n\n\n down_load_list_of_obs_files (folder='./', date='', station_list=[])\n\nThis function downloads a list of observation files from a given URL for a given date and station list.\nParameters: folder (str): The folder where the files should be downloaded. date (str): The date for which the files should be downloaded. station_list (list): A list of stations for which the files should be downloaded.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nstr\n./\nExisting folder to store downloaded CORS data.\n\n\ndate\nstr\n\nDate to download. Format: ‘YYYY:MM:DD’\n\n\nstation_list\nlist\n[]\nList of CORS station identifiers.\n\n\n\n\n\n\n\n\n down_load_cors_data (folder:str='/tmp', date:str='',\n                      progress_callback=None, station_list:list=[])\n\nDownload CORS RINEX data for the designated date, specified identifiers in the station_list, and store the data in the given folder.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nstr\n/tmp\nExisting folder to store downloaded CORS data.\n\n\ndate\nstr\n\nDate to download. Format: ‘YYYY:MM:DD’\n\n\nprogress_callback\nNoneType\nNone\nUser defined function to report progress\n\n\nstation_list\nlist\n[]\nList of CORS station identifiers.\n\n\nReturns\nlist"
  },
  {
    "objectID": "cors.html#module-globals",
    "href": "cors.html#module-globals",
    "title": "CORS",
    "section": "",
    "text": "CORS_Lib_asof is the date CORS library was compiled.\nIN_COLAB will be True if you are running in Google COlab and set to False otherwise.\n\nCORS_Lib_asof      = 'CORS_Lib_asof: 2023-0614-1908'\n\nThe following module global variables hold the urls to the various parts of the NOAA CORS website.\n\nbase_url           = 'https://geodesy.noaa.gov/'\nrinex_url          = base_url+'corsdata/rinex/'\ncoords_url         = base_url+'corsdata/coord/coord_14/'\nplots_url          = base_url+'corsdata/Plots/'\nstation_log_url    = base_url+'corsdata/station_log/'\ncors_info_url_list = [ base_url+'/corsdata/readme.txt', \n                      base_url+'/corsdata/RINEX211.txt' ]\n\ntest_folder is the default folder where downloaded CORS data will be stored during testing of this package.\n\ntest_folder = '/tmp/test/'\n\nwget_return_codes are the code numbers and decoded descriptions returned by the wget program. wget is used by this package to download the datasets.\n\nwget_return_codes = ('0, No problems occurred.', \n                     '1, Generic error code.',\n                     '2, Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...',\n                     '3, File I/O error.',\n                     '4, Network failure.',\n                     '5, SSL verification failure.',\n                     '6, Username/password authentication failure.',\n                     '7, Protocol errors.',\n                     '8, Server issued an error response.')\n\nTeqc is used to slice RINEX files by time. The url list below are the full list of UNAVCO download sites for teqc. The install_teqc function will download try each one and check that it works.\n\nteqc_list          = [ \n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_CentOSLx86_64s.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_CentOSLx86_64d.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_Lx86_64d.zip',\n    'https://www.unavco.org/software/data-processing/teqc/development/teqc_Lx86_64s.zip'\n]\n\nIf running on Google Colab, the default path to store binary programs such as teqc is set below. If not running in Colab, binarys will be stored in ~/bin in the users home directory.\n\nprint(f'     IN_COLAB: {IN_COLAB}')\nprint(f'    local_bin: {local_bin}')\nprint(f'CORS_Lib_asof: {CORS_Lib_asof}')\nprint(f'     base_url: {base_url}')\nprint(f'    rinex_url: {rinex_url}')\n\n     IN_COLAB: False\n    local_bin: /home/wright/bin/\nCORS_Lib_asof: CORS_Lib_asof: 2023-0614-1908\n     base_url: https://geodesy.noaa.gov/\n    rinex_url: https://geodesy.noaa.gov/corsdata/rinex/"
  },
  {
    "objectID": "cors.html#functions",
    "href": "cors.html#functions",
    "title": "CORS",
    "section": "",
    "text": "install_teqc ()\n\nThis function is used to download and install the teqc software from Unavco. It first checks if the teqc software is already installed in the system. If not, it downloads the teqc_Lx86_64s.zip file from Unavco, unzips it, creates a local bin directory and moves the teqc file to the local bin directory. Finally, it deletes the zip file.\nSee: https://www.unavco.org/software/data-processing/teqc/teqc.html\nParameters: None\nReturns: A string indicating the state of the installation. It can be either: ‘Teqc installed.’, ‘Teqc was already installed.’, or ‘teqc install failed.’\n\ntest_teqc_state = install_teqc()\nprint(test_teqc_state)\n! which teqc\n! teqc -version\n\ninstall_teqc(): \nTeqc was already installed.\n/home/wright/bin/teqc\nexecutable:  teqc\nversion:     teqc  2019Feb25\nbuild:       Linux 2.6.32-573.12.1.x86_64|x86_64|gcc|Linux 64|=+\n\n\n\n\n\n\n\n extract_year (date:str)\n\nExtract the year from a date string in the form: \"2023/1/1\"\nHere is an example.\n\nextract_year( '2023/1/20')\n\n'2023'\n\n\n\n\n\n\n\n isTimeFormat (ts:str)\n\nisTimeFormat(ts) checks the ‘ts’ input string for validity. A valid string is in this format: ‘13:34:56’.\nReturns True for a valid string,a nd False for invalid.\n\n\n\n\nType\nDetails\n\n\n\n\nts\nstr\nTime string as: HH:MM:SS\n\n\nReturns\nbool\nTrue if valid HH:MM:SS time string.\n\n\n\nBelow we test the isTimeFormat() with several input times.\n\nprint('          Returned\\n'\\\n      'Time      Value (rv)\\n'\\\n      '--------------------')\nfor t in ['12:34:56',\n          '12:34',\n          '01:02:03',\n          '23:01:02',\n          '25:34:63']:\n  rv = isTimeFormat(t)\n  print(f'{t:9} rv:{rv}')\n\n          Returned\nTime      Value (rv)\n--------------------\n12:34:56  rv:True\n12:34     rv:False\n01:02:03  rv:True\n23:01:02  rv:True\n25:34:63  rv:False\n\n\n\n\n\n\n\n utctoweekseconds (utc, leapseconds)\n\nThis function takes two parameters, utc and leapseconds, and returns the GPS week, the GPS day, and the seconds and microseconds since the beginning of the GPS week.\nParameters: utc (datetime.datetime): The UTC time to be converted. leapseconds (int): The number of leap seconds to be added to the UTC time. See: GPS Leap Seconds for more information.\nReturns: A tuple containing the GPS week, the GPS day, and the seconds and microseconds since the beginning of the GPS week.\nThe GPS week is an integer representing the number of weeks since the beginning of the GPS epoch (1980-01-06 00:00:00). The GPS day is an integer representing the number of days since the beginning of the GPS week. The seconds and microseconds since the beginning of the GPS week are both integers representing the number of seconds and microseconds since the beginning of the GPS week.\nExample: utc = datetime.datetime(2020, 1, 1, 0, 0, 0) leapseconds = 18\nutctoweekseconds(utc, leapseconds)\nReturns: (2086, 0, 0, 0)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nutc\n\nDate string ‘YYYY/MM/DD’\n\n\nleapseconds\n\nFor 2023, use -18\n\n\nReturns\ntuple\n(GPS_Week, GPS_day, Seconds_since_midnight)\n\n\n\n\n\n\n\n\n compute_day_of_year (date_str:str)\n\nThis function computes the day of the year from a given date string in the format ‘YYYY/MM/DD’.\nParameters: date_str (str): A string representing a date in the format ‘YYYY/MM/DD’.\nReturns: A tuple containing the date in the following formats: ( YYYY/jjj, YYYY-MMDD-Jjjj, YYYY, jjj, DoW)’, where YYYY is the year, jjj: Juliean Day, DoY is the Day of the week.\nEach tuple element has a particular purpose. The first element YYYY/jjj represents the portion of the path used on the CORS web site. The second element, YYYY-MMDD-Jjjj is used to generate the path to store downloaded data. The YYYY is simply the year, and jjj is simple the Julean day of the year, and DoW is the day of the week. Each element is type str.\nExample: compute_day_of_year(‘2020/04/15’)\nReturns: (‘2020/105’, ‘2020-0415-J105’, ‘2020’, ‘105’, ‘04’, ‘15’)\nThe returned tuple contains the day of the year in the format ‘YYYY/DDD’, the year as a string, the day as a string, the month as a string, and the day as a string. The first element of the tuple is the day of the year in the format ‘YYYY/DDD’, which is the year followed by the day of the year. The second element of the tuple is the year as a string. The third element of the tuple is the day as a string. The fourth element of the tuple is the month as a string. The fifth element of the tuple is the day of the week as a string.\nThe CORS path segment refers to the portion of the url that represents the date of the date.\n\n\n\n\nType\nDetails\n\n\n\n\ndate_str\nstr\nDate as ‘YYYY/MM/DD’\n\n\nReturns\ntuple\n\n\n\n\n\ntest_dates = [\n    '2023/1/1',\n    '2023/01/01',\n    '2023/12/31',\n    '2023/05/20'\n]\nprint('All returned data:')\nprint('Input Date     ( YYYY/jjj,   YYYY-MMDD-Jjjj,   YYYY,   jjj,        DoW)')\nprint('-----------------------------------------------------------------------')\nfor d in test_dates:\n  print( f'{d:12} : { compute_day_of_year(d) } ')\n\nprint('\\nDate           CORS path\\n'\\\n       '               segment only:')\nfor d in test_dates:\n  print( f'{d:12} : { compute_day_of_year(d)[0]}')\n\nAll returned data:\nInput Date     ( YYYY/jjj,   YYYY-MMDD-Jjjj,   YYYY,   jjj,        DoW)\n-----------------------------------------------------------------------\n2023/1/1     : ('2023/001', '2023-0101-J001', '2023', '001', '01', '01') \n2023/01/01   : ('2023/001', '2023-0101-J001', '2023', '001', '01', '01') \n2023/12/31   : ('2023/365', '2023-1231-J365', '2023', '365', '12', '31') \n2023/05/20   : ('2023/140', '2023-0520-J140', '2023', '140', '05', '20') \n\nDate           CORS path\n               segment only:\n2023/1/1     : 2023/001\n2023/01/01   : 2023/001\n2023/12/31   : 2023/365\n2023/05/20   : 2023/140\n\n\n\ntest_eq(1,1)\n\n\n\n\n\n\n getHTMLdocument (url)\n\n\n\n\n\nType\nDetails\n\n\n\n\nurl\n\nThe url to get.\n\n\nReturns\nstr\nthe contents of the url as a string.\n\n\n\n\n# Test  getHTMLdocument(rinex_url)\ntest_html = getHTMLdocument(rinex_url)\n\ni = 0\nfor line in test_html.splitlines():\n  print(line); i += 1\n  if i == 10:\n    break\n\n&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;\n&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Index of /corsdata/rinex&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n&lt;h1&gt;Index of /corsdata/rinex&lt;/h1&gt;\n  &lt;table&gt;\n   &lt;tr&gt;&lt;th valign=\"top\"&gt;&lt;img src=\"/icons/blank.gif\" alt=\"[ICO]\"&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=N;O=D\"&gt;Name&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=M;O=A\"&gt;Last modified&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=S;O=A\"&gt;Size&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=\"?C=D;O=A\"&gt;Description&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;\n   &lt;tr&gt;&lt;th colspan=\"5\"&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;\n\n\n\n\n\n\n\n CORS_get_Support_url_list (base_url:str, date:str,\n                            file_types:str='sp3.gz|n.gz|g.gz')\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nbase_url\nstr\n\nCOR url.\n\n\ndate\nstr\n\nDate. Format: ‘YYYY:MM:DD’\n\n\nfile_types\nstr\nsp3.gz|n.gz|g.gz\nfile types to get.\n\n\nReturns\nlist\n\nA list of CORS nav and SP3 files.\n\n\n\n\nprint('Testing: CORS_get_Support_url_list()')\nprint('sp3.gz and n.gz and g.gz')\n\nurl = rinex_url\nsp3_and_nav_urls = CORS_get_Support_url_list(url, date='2023/05/23')\nfor fn in sp3_and_nav_urls:\n  print(fn)\n\nprint('\\nsp3 only.')\nfile_types=\"sp3.gz\"\nsp3_urls = CORS_get_Support_url_list(url, date='2023/05/23', file_types=\"sp3.gz\")\nfor fn in sp3_urls:\n  print(fn)\n\nprint('\\nn.gz and g.gz only.')\nfile_types=\"sp3.gz\"\nnav_urls = CORS_get_Support_url_list(url, date='2023/05/23', file_types=\"n.gz|g.gz\")\nfor fn in nav_urls:\n  print(fn)\nprint('Done.')\n\nTesting: CORS_get_Support_url_list()\nsp3.gz and n.gz and g.gz\n\n\n\n\n\n\n\n download_urls (url_list, folder, clobber=False, id='', options='',\n                cut_dirs=4)\n\ndownload_urls() is a function that downloads a list of URLs to a specified root directory.\nParameters: url_list (list): A list of URLs to be downloaded. root_dir (str): The root directory to which the URLs will be downloaded. clobber (bool): A boolean value indicating whether existing files should be overwritten. id (str): An optional identifier for the download. options (str): An optional string of additional wget options.\nThe function uses the wget command to download the URLs. The wget options used are:\n-nv: Not verbose\n-nc: No clobber (use for OSB files to avoid overwriting 1-Sec with 30-Sec)\n-np: No parent. (Important)\n-nH: Do not create a directory named after the url\n--cut-dirs=4: Remove the first four subdirs\n-R \"index.html*\": Do not keep the index.html* files.\n-P xxx: xxx will be the root directory\n\nWget return codes:\n  0   No problems occurred.\n  1   Generic error code.\n  2   Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...\n  3   File I/O error.\n  4   Network failure.\n  5   SSL verification failure.\n  6   Username/password authentication failure.\n  7   Protocol errors.\n  8   Server issued an error response.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl_list\n\n\nList of urls to download.\n\n\nfolder\n\n\nFolder to store the downloads.\n\n\nclobber\nbool\nFalse\nTrue to overwrite, False to not overwrite existing files.\n\n\nid\nstr\n\nOptional id to use in the log file to identify the log.\n\n\noptions\nstr\n\nwget options.\n\n\ncut_dirs\nint\n4\nNumber of url subdirectories to trim.\n\n\nReturns\nlist\n\na list of return status strings for each download.\n\n\n\n\n# Test with some sp3 and nav data.\ntest_url      = rinex_url\nfn = f'{test_folder}/sp3_nav'\ndate = '2023/04/28'\nprint('Testing: CORS_get_Support_url_list()')\nprint(f'Storing in folder: {fn}\\n'\\\n      f'             Date: {date}\\n')\n\ntest_url_list = CORS_get_Support_url_list(test_url, date = date)\nprint('Urls downloaded')\nfor url in test_url_list:\n  print(url)\nrv = download_urls(test_url_list, folder=fn, id='sp3')\nrv_str = wget_return_codes[rv.returncode]\nprint(f'\\nOperation completed. The Wget response was: {rv_str}')\n\n\n\n\n\n\n CORS_trim_to_time (f:str, start:str, stop:str)\n\nTrims a RINEX file (f) to be between the ‘start’ and ‘stop’ times given.\nThis function takes in a file name (f), start time (start) and stop time (stop) as parameters and trims the file to the given time range.\nThe start and stop times are first converted to a format without colons, hyphens and periods. The teqc command is then used to trim the file to the given time range and the output is stored in a temporary file. The temporary file is then moved to the original file name.\nParameters: f (str): The file name to be trimmed. start (str): The start time in the format ‘YYYY-MM-DD HH:MM:SS.SSS’. stop (str): The stop time in the format ‘YYYY-MM-DD HH:MM:SS.SSS’.\nReturns: rv (CompletedProcess): A CompletedProcess object containing information about the run command.\n\n\n\n\nType\nDetails\n\n\n\n\nf\nstr\nRINEX file Name\n\n\nstart\nstr\nStart time str as 'YYYY-MM-DD HH:MM:SS.SSS'\n\n\nstop\nstr\nStop time str as 'YYYY-MM-DD HH:MM:SS.SSS'\n\n\n\n\n\n\n\n\n CORS_get_station_log_url (station_list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the station log files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the station log files.\n\n\n\n\nType\nDetails\n\n\n\n\nstation_list\n\nPython list of CORS Stations.\n\n\nReturns\nlist\nA list of station log file urls\n\n\n\n\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = CORS_get_station_log_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_station_log (dir:str, station_list:list)\n\nThis function downloads the log files of the given CORS stations from the NGS website.\nParameters: dir (str): The directory where the log files should be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (dict): A dictionary containing the station name as the key and the path of the downloaded log file as the value.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\nReturns\nlist\na dict where key is the station ID, and value is path of the downloade file\n\n\n\n\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_station_log( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n CORS_get_station_plots_url (station_list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the corresponding station plot files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the corresponding station plot files.\n\n\n\n\nDetails\n\n\n\n\nstation_list\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: CORS_get_station_plots_url()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nrv = CORS_get_station_plots_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_plots (dir:str, station_list:list)\n\nThis function downloads the plots of the CORS stations from the NGS website.\nParameters: dir (str): The directory where the files will be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: down_load_cors_plots_coords()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_plots( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n CORS_get_station_coords_url (station_list:list)\n\nThis function takes a list of station names as an argument and returns a list of URLs for the corresponding station coordinates files.\nParameters: station_list (list): A list of station names.\nReturns: lst (list): A list of URLs for the corresponding station coordinates files.\n\n\n\n\nType\nDetails\n\n\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\nReturns\nlist\nList of coordinates urls\n\n\n\nExample usage:\n\nprint('Testing: CORS_get_station_coords_url()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nrv = CORS_get_station_coords_url( station_list )\ndisplay(rv)\nprint('Done.')\n\n\n\n\n\n\n down_load_cors_station_coords (dir:str, station_list:list)\n\nThis function downloads the coordinates of the CORS stations from the NGS website.\nParameters: dir (str): The directory where the files will be downloaded. station_list (list): A list of CORS station names.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDetails\n\n\n\n\ndir\nstr\nExisting folder to place the file.\n\n\nstation_list\nlist\nPython list of CORS Stations.\n\n\n\n\nprint('Testing: down_load_cors_station_coords()')\nstation_list  = ['ncdu', 'ncbe', 'NCRT', 'loy2']\nlocal_test_folder = test_folder\nrv = down_load_cors_station_coords( local_test_folder, station_list )\nprint(f'{wget_return_codes[rv.returncode]} See: {rv.stderr}' )\nprint('Done.')\n\n\n\n\n\n\n clean_up_CORS (rdir:str, date:str)\n\nclean_up_CORS(rdir, date) Inputs: rdir Directory to start the find command in. date The date of the CORS files to cleanup.\nOutputs: Removes unnecessary files. Returns: None.\nUses the Linux ‘find’ command to locate and remove unnecessary files from within a CORS station directory.\n\n\n\n\nType\nDetails\n\n\n\n\nrdir\nstr\nDirectory start in.\n\n\ndate\nstr\nDate of files to clean up.\n\n\n\n\n\n\n\n\n down_load_list_of_obs_files (folder='./', date='', station_list=[])\n\nThis function downloads a list of observation files from a given URL for a given date and station list.\nParameters: folder (str): The folder where the files should be downloaded. date (str): The date for which the files should be downloaded. station_list (list): A list of stations for which the files should be downloaded.\nReturns: rv (list): A list of the downloaded files.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nstr\n./\nExisting folder to store downloaded CORS data.\n\n\ndate\nstr\n\nDate to download. Format: ‘YYYY:MM:DD’\n\n\nstation_list\nlist\n[]\nList of CORS station identifiers.\n\n\n\n\n\n\n\n\n down_load_cors_data (folder:str='/tmp', date:str='',\n                      progress_callback=None, station_list:list=[])\n\nDownload CORS RINEX data for the designated date, specified identifiers in the station_list, and store the data in the given folder.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nstr\n/tmp\nExisting folder to store downloaded CORS data.\n\n\ndate\nstr\n\nDate to download. Format: ‘YYYY:MM:DD’\n\n\nprogress_callback\nNoneType\nNone\nUser defined function to report progress\n\n\nstation_list\nlist\n[]\nList of CORS station identifiers.\n\n\nReturns\nlist"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CORS",
    "section": "",
    "text": "pip install CORS"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "CORS",
    "section": "",
    "text": "pip install CORS"
  },
  {
    "objectID": "index.html#basic-usage",
    "href": "index.html#basic-usage",
    "title": "CORS",
    "section": "Basic Usage:",
    "text": "Basic Usage:\nimport the CORS package.\n\nimport CORS\n\nThe url pointing to the CORS data site is predefined ( CORS.rinex_url ) as a module global variable and is used by CORS functions to reference the CORS RINEX date web site.\n\nCORS.rinex_url\n\n'https://geodesy.noaa.gov/corsdata/rinex/'\n\n\nPlace the desired CORS station identifiers in a list, and set the desired date you want the CORS data for. It must be in string format ‘YYYY/MM/DD’. The library defaults to storing the CORS data in the module global CORS.test_folder; however, you can use any writable exising directory.\n\nstation_list      = [\n  'ncdu', \n  'ncbe', \n  'NCRT', \n  'LOY2', \n  'LS03' \n]\n\ndate = '2023/5/25'\n\nlocal_test_folder = CORS.test_folder\n\nBelow we print out a summary of the input parameters.\nNow call CORS.down_load_cors_data().\n\nrv = CORS.down_load_cors_data( \n    folder       = local_test_folder, \n    date         = date, \n    station_list = station_list,\n)\n\nsaving to: /tmp/test//2023-0525-J145-CORS\nDownloading info on selected stations.\nDownloading selected OBS files.\nDownloading sp3 & nav files.\nDownloading station coords, logs, and plots.\nAll downloads completed.\n\n\nThe returned value rv\n\nprint('The server responded with:')\nfor v in rv:\n  if v.returncode != 0:\n    print(f'{v.id:12}{CORS.wget_return_codes[ v.returncode ]}, See:{v.stderr}')\n  else:\n    print(f'{v.id:12}Ok.')\nprint('Done.')\n\nThe server responded with:\ninfo        Ok.\nOBS         8, Server issued an error response., See:/tmp/test//2023-0525-J145-CORS/2023-0615-123001-CORS-wget-OBS-log.txt\nsp3         Ok.\ncoords      Ok.\nstation     Ok.\nPlots       8, Server issued an error response., See:/tmp/test//2023-0525-J145-CORS/2023-0615-123027-CORS-wget-Plots-log.txt\nDone."
  },
  {
    "objectID": "index.html#advanced-usage",
    "href": "index.html#advanced-usage",
    "title": "CORS",
    "section": "Advanced Usage",
    "text": "Advanced Usage\n\nProgress Callback\nYou can supply a progress callback function and the CORS.down_load_cors_data() will call it to report progress.\nThis callback can be used to update a users GUI status indicator.\n\ndef my_progress( message:str ):\n  print(f'my_progress: { message }')\n\n\nrv = CORS.down_load_cors_data( \n    folder       = local_test_folder, \n    date         = date, \n    station_list = station_list,\n    progress_callback = my_progress,\n)\n\nmy_progress: saving to: /tmp/test//2023-0525-J145-CORS\nmy_progress: Downloading info on selected stations.\nmy_progress: Downloading selected OBS files.\nmy_progress: Downloading sp3 & nav files.\nmy_progress: Downloading station coords, logs, and plots.\nmy_progress: All downloads completed."
  }
]